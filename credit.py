# -*- coding: utf-8 -*-
"""credit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zS3-6QVPXfpwbtwTWwgF1_b0JL6DHgqB
"""

# Validador de cartão feito pelo aluno: Roberto Bastos Souza
# Professor: Abrantes
# Turma: CC3M
# Matrícula: 202197369
# Este validador mostra se o cartão é válido ou não, sintaticamente falando
# Além de informa a bandeira que o cartão pertence

#LISTAS UTILIZADAS NO CÓDIGO:
numrcard_2x = [] #lista dos números do cartão (PULANDO DE 1 EM 1, COMEÇANDO PELO PENÚLTIMO E EM DIREÇÃO A ESQUERDA), multiplicados por 2.

numrcard_nine = [] #lista dos números do cartão multiplicados por 2 que deram maior que 9 e subtraidos por 9. Logo depois, foi adicionado os números restantes do cartão para que fosse efetuado a soma dos números.

numrcard = [] #lista dos caracteres numéricos filtrados do input do usuário.

numrcard_int = [] #lista dos números do cartão que foram transformados em inteiros.

numrcardprev = list(input("Digite o número do seu cartão(ÑÃO PODE CONTER ESPAÇOS E HÍFENS):")) #lista de string do input do usuário (onde ele digitará o número do cartão).

for i in numrcardprev:
  if (i.isdigit()):
    numrcard.append(i) #A partir daqui, a lista está formada apenas por caracteres numéricos, filtrando ' ' ou ' - ' que o usuário tenha posto.

numrcard_int = [int(i) for i in numrcard] #Aqui os valores da lista numrcard foram transformados em inteiros, para que fosse possível fazer operações matemáticas.

#Uma estrutura de repetição foi colocada aqui para que fosse possível contar de 2 em 2 a partir do penúltimo número, além de inverter a lista para a contagem. E, por fim, os resultados dobrados são adicionados na lista numrcard_2x.
for d in list(reversed(numrcard_int))[1::2]:
  double_card = d * 2
  numrcard_2x.append(double_card)
print(numrcard_2x)

#Aqui criei outra estrutura de repetição que, caso o número dobrado da lista numrcard_2x for maior que 9, ele é subtraido por 9 e adicionado em uma nova lista, a lista numrcard_nine, que irá conter todos os números do cartão E os subtraidos por 9.
for m in list(numrcard_2x):
  if m > 9:
    nine_card = m - 9
    numrcard_nine.append(nine_card)
  else:
    numrcard_nine.append(m)

#Estrutura de repetição responsável por pegar o resto dos números que foram "pulados" da lista de inteiros para a soma.
for n in list(reversed(numrcard_int))[::2]:
  numrcard_nine.append(n)

#Estrutura de condição com a função de confirmar a validação do cartão: Se o resto da divisão da soma dos números do cartão por 10 for 0, o cartão é válido, pelo menos sinteticamente falando.
if sum(numrcard_nine) % 10 == 0:
  if numrcard_int[0] == 4:
    print("Bandeira: Visa")
  elif numrcard_int[0] == 5 and (numrcard_int[1]== 1 or 2 or 3 or 4 or 5):
    print("Bandeira: MasterCard")
  elif numrcard_int[0] == 3 and (numrcard_int[1]== 4 or 7):
    print("Bandeira: AMEX")
  else:
    print("O cartão é inválido")
else:
  print("O cartão é inválido")